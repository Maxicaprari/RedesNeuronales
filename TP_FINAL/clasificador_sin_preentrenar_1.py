# -*- coding: utf-8 -*-
"""clasificador_sin_preentrenar_1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Wj0Hz9iKM2TTgwutz8dCkrR57qhbTu5Q
"""

import torch
import torch.nn as nn

class Clasificador_Conv(nn.Module):
    def __init__(self, n1=128, n2=256, p=0.2):
        super().__init__()

        self.n1 = n1
        self.n2 = n2
        self.p = p

        # **Definir el encoder directamente en el clasificador**
        self.encoder = nn.Sequential(
            nn.Conv2d(1, 16, kernel_size=3, padding=1),
            nn.ReLU(),
            nn.Dropout(self.p),
            nn.MaxPool2d(2, 2),

            nn.Conv2d(16, 32, kernel_size=3, padding=1),
            nn.ReLU(),
            nn.Dropout(self.p),
            nn.MaxPool2d(2, 2),

            nn.Flatten()  # Aplanar salida antes de la capa lineal
        )

        # **Clasificador con 3 capas densas**
        self.clasificador = nn.Sequential(
            nn.Linear(32 * 7 * 7, self.n1),
            nn.ReLU(),
            nn.Dropout(self.p),

            nn.Linear(self.n1, self.n2),
            nn.ReLU(),
            nn.Dropout(self.p),

            nn.Linear(self.n2, 10)  # 10 clases de salida
        )

    def forward(self, x):
        x = self.encoder(x)
        x = self.clasificador(x)
        return x