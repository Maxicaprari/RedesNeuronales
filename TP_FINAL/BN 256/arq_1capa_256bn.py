# -*- coding: utf-8 -*-
"""arq_1capa_256BN

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fbkP_pwHbW_9MXNJ7jqNmUJfT1VyMBIV
"""

import torch
import torch.nn as nn

class Autoencoder_Conv(nn.Module):
    def __init__(self, n=256, p=0.2):  # Cambié n=28*28 a n=256
        super().__init__()
        self.n = n
        self.p = p

        # ENCODER: Solo una capa convolucional + MaxPool
        self.encoder = nn.Sequential(
            nn.Conv2d(in_channels=1, out_channels=16, kernel_size=3, padding=1),  # (16, 28, 28)
            nn.ReLU(),
            nn.Dropout(self.p),
            nn.MaxPool2d(kernel_size=2, stride=2),  # (16, 14, 14)
            nn.Flatten(),  # (16 * 14 * 14) = 3136
            nn.Linear(16 * 14 * 14, 256),  # Proyección a 256-dimensional
            nn.ReLU(),
            nn.Dropout(self.p)
        )

        # DECODER: Proyección inversa + Capa transpuesta
        self.decoder = nn.Sequential(
            nn.Linear(256, 16 * 14 * 14),  # Volver a la forma antes del flatten
            nn.ReLU(),
            nn.Dropout(self.p),
            nn.Unflatten(dim=1, unflattened_size=(16, 14, 14)),  # (16, 14, 14)
            nn.ConvTranspose2d(in_channels=16, out_channels=1, kernel_size=3, stride=2, padding=1, output_padding=1),  # (1, 28, 28)
            nn.Sigmoid()
        )

    def forward(self, x):
        x = self.encoder(x)
        x = self.decoder(x)
        return x